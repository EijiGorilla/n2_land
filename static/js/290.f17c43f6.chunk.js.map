{"version":3,"file":"static/js/290.f17c43f6.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/charts/xy/axes/DateAxis.ts","components/LotProgressChart.tsx"],"sourcesContent":["import { DataItem } from \"../../../core/render/Component\";\nimport type { AxisRenderer } from \"./AxisRenderer\";\nimport type { XYSeries, IXYSeriesDataItem } from \"../series/XYSeries\";\nimport { ValueAxis, IValueAxisSettings, IValueAxisPrivate, IValueAxisDataItem, IMinMaxStep, IValueAxisEvents } from \"./ValueAxis\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $order from \"../../../core/util/Order\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $object from \"../../../core/util/Object\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $time from \"../../../core/util/Time\";\nimport type { ITimeInterval } from \"../../../core/util/Time\";\nimport type { TimeUnit } from \"../../../core/util/Time\";\n\nexport interface IDateAxisSettings<R extends AxisRenderer> extends IValueAxisSettings<R> {\n\n\t/**\n\t * Indicates granularity of data.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Data_granularity} for more info\n\t */\n\tbaseInterval: ITimeInterval;\n\n\t/**\n\t * Relative location of where axis cell starts: 0 - beginning, 1 - end.\n\t *\n\t * IMPORTANT: `startLocation` is not supported by [[GaplessDateAxis]].\n\t *\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location of where axis cell ends: 0 - beginning, 1 - end.\n\t *\n\t * IMPORTANT: `endLocation` is not supported by [[GaplessDateAxis]].\n\t * \n\t * @default 1\n\t */\n\tendLocation?: number;\n\n\t/**\n\t * Should axis group data items togeter dynamically?\n\t *\n\t * @default false\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupData?: boolean;\n\n\t/**\n\t * Maximum number of data items in the view before data grouping kicks in.\n\t *\n\t * @default 500\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupCount?: number;\n\n\t/**\n\t * Force data item grouping to specific interval.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupInterval?: ITimeInterval;\n\n\t/**\n\t * A list of intervals the axis is allowed to group data items into.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupIntervals?: Array<ITimeInterval>;\n\n\t/**\n\t * A list of intervals the axis is allowed to show grid/labels on.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Grid_granularity} for more info\n\t */\n\tgridIntervals?: Array<ITimeInterval>;\n\n\t/**\n\t * Display \"period change\" labels using different format.\n\t *\n\t * If set to `true`, will use `periodChangeDateFormats` instead\n\t * of `dateFormats` for such labels, e.g. for month start.\n\t *\n\t * @default true\n\t */\n\tmarkUnitChange?: boolean;\n\n\t/**\n\t * Date formats used for intermediate labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Date_formats} for more info\n\t */\n\tdateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * Date formats used for \"period change\" labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Date_formats} for more info\n\t */\n\tperiodChangeDateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * A date format to use for axis tooltip.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t */\n\ttooltipDateFormat?: string | Intl.DateTimeFormatOptions;\n\n\t/**\n\t * Time unit-specific formats to use for axis tooltip.\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t * @since 5.1.4\n\t */\n\ttooltipDateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * A value which indicates relative position within axis cell to get timestamp\n\t * for the tooltip from.\n\t *\n\t * Values are from `-1` to `1`.\n\t *\n\t * If not set, it will use `tooltipLocation` value, if `tooltipLocation`` is\n\t * not set, it will use -0.5.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t * @since 5.1.4\n\t */\n\ttooltipIntervalOffset?: number;\n}\n\nexport interface IDateAxisDataItem extends IValueAxisDataItem {\n}\n\nexport interface IDateAxisPrivate extends IValueAxisPrivate {\n\n\t/**\n\t * Current group interval.\n\t */\n\tgroupInterval?: ITimeInterval;\n\n\t/**\n\t * Current base interval.\n\t */\n\tbaseInterval: ITimeInterval;\n\n\t/**\n\t * Current grid interval.\n\t */\n\tgridInterval: ITimeInterval;\n}\n\nexport interface IDateAxisEvents extends IValueAxisEvents {\n\n\t/**\n\t * Kicks in when data grouping is on, and current group interval changes, e.g. via zooming the chart.\n\t *\n\t * @since 5.2.43\n\t */\n\tgroupintervalchanged: {}\n\n}\n\n/**\n * Creates a date axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/} for more info\n * @important\n */\nexport class DateAxis<R extends AxisRenderer> extends ValueAxis<R> {\n\tpublic static className: string = \"DateAxis\";\n\tpublic static classNames: Array<string> = ValueAxis.classNames.concat([DateAxis.className]);\n\n\tdeclare public _settings: IDateAxisSettings<R>;\n\tdeclare public _privateSettings: IDateAxisPrivate;\n\tdeclare public _dataItemSettings: IDateAxisDataItem;\n\tdeclare public _events: IDateAxisEvents;\n\n\tprotected _dataGrouped: boolean = false;\n\tprotected _seriesDataGrouped: boolean = false;\n\tprotected _groupingCalculated: boolean = false;\n\tprotected _intervalDuration: number = 1;\n\tprotected _baseDuration: number = 1;\n\n\tprotected _intervalMax: { [index: string]: number } = {};\n\tprotected _intervalMin: { [index: string]: number } = {};\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tsuper._afterNew();\n\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\tthis.on(\"baseInterval\", () => {\n\t\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\t})\n\t}\n\n\tprotected _setBaseInterval(interval: ITimeInterval) {\n\t\tthis.setPrivateRaw(\"baseInterval\", interval);\n\t\tthis._baseDuration = $time.getIntervalDuration(interval);\n\t}\n\n\tprotected _fixZoomFactor() {\n\t\tconst maxZoomFactor = this.get(\"maxZoomFactor\");\n\t\tif (maxZoomFactor != null && maxZoomFactor != Infinity) {\n\t\t\tthis.setPrivateRaw(\"maxZoomFactor\", maxZoomFactor);\n\t\t}\n\t\telse {\n\t\t\tthis.setPrivateRaw(\"maxZoomFactor\", Math.round((this.getPrivate(\"max\", 0) - this.getPrivate(\"min\", 0)) / this.baseMainDuration()));\n\t\t}\n\t}\n\n\tprotected _groupData() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif (($type.isNumber(min) && $type.isNumber(max))) {\n\n\t\t\tthis._fixZoomFactor();\n\n\t\t\tconst groupInterval = this.getPrivate(\"groupInterval\")!;\n\t\t\tif (groupInterval) {\n\t\t\t\tthis._setBaseInterval(groupInterval);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\t\t}\n\n\n\t\t\tif (this.isDirty(\"groupInterval\")) {\n\t\t\t\tlet groupInterval = this.get(\"groupInterval\")!;\n\t\t\t\tif (groupInterval) {\n\t\t\t\t\tthis.setRaw(\"groupIntervals\", [groupInterval]);\n\t\t\t\t\tthis._handleRangeChange();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isDirty(\"groupData\")) {\n\t\t\t\tif (!this._dataGrouped) {\n\t\t\t\t\tif (this.get(\"groupData\")) {\n\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\tthis._groupSeriesData(series);\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tthis._handleRangeChange();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\t\t\t\t\tlet mainDataSetId: string = baseInterval.timeUnit + baseInterval.count;\n\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\tseries.setDataSet(mainDataSetId);\n\t\t\t\t\t\t\tseries.resetGrouping();\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tthis._setBaseInterval(baseInterval);\n\t\t\t\t\t\tthis.setPrivateRaw(\"groupInterval\", undefined);\n\t\t\t\t\t\tthis.markDirtyExtremes();\n\t\t\t\t\t}\n\t\t\t\t\tthis._dataGrouped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic _groupSeriesData(series: XYSeries) {\n\t\tif (this.get(\"groupData\") && !series.get(\"groupDataDisabled\")) {\n\n\t\t\tthis._dataGrouped = true; // helps to avoid double grouping\n\n\t\t\tthis._seriesDataGrouped = true;\n\n\t\t\t// make array of intervals which will be used;\n\t\t\tlet intervals: ITimeInterval[] = [];\n\t\t\tlet baseDuration = this.baseMainDuration();\n\n\t\t\tlet groupIntervals = this.get(\"groupIntervals\")!;\n\t\t\tif (groupIntervals) { }\n\t\t\t$array.each(groupIntervals, (interval) => {\n\t\t\t\tlet intervalDuration = $time.getIntervalDuration(interval);\n\t\t\t\tif (intervalDuration > baseDuration) {\n\t\t\t\t\tintervals.push(interval);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tseries._dataSets = {};\n\n\t\t\tconst key = this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!;\n\t\t\tlet fields: Array<string>;\n\n\t\t\tconst baseAxis = series.get(\"baseAxis\");\n\n\t\t\tif (series.get(\"xAxis\") === baseAxis) {\n\t\t\t\tfields = series._valueYFields;\n\t\t\t}\n\t\t\telse if (series.get(\"yAxis\") === baseAxis) {\n\t\t\t\tfields = series._valueXFields;\n\t\t\t}\n\n\t\t\tlet dataItems = series._mainDataItems;\n\t\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\t\tlet mainDataSetId: string = baseInterval.timeUnit + baseInterval.count;\n\n\t\t\tseries._dataSets[mainDataSetId] = dataItems;\n\n\t\t\tconst groupCallback = series.get(\"groupDataCallback\");\n\t\t\tlet groupOriginals = series.get(\"groupDataWithOriginals\", false);\n\t\t\tif (groupCallback) {\n\t\t\t\tgroupOriginals = true;\n\t\t\t}\n\n\t\t\tconst firstDay = this._root.locale.firstDayOfWeek;\n\t\t\tconst utc = this._root.utc;\n\t\t\tconst timezone = this._root.timezone;\n\n\t\t\t$array.each(intervals, (interval) => {\n\n\t\t\t\tlet previousTime = -Infinity;\n\t\t\t\tlet dataSetId = interval.timeUnit + interval.count;\n\t\t\t\tseries._dataSets[dataSetId] = [];\n\n\t\t\t\tlet newDataItem: DataItem<IXYSeriesDataItem>;\n\n\t\t\t\tlet sum: { [index: string]: number } = {};\n\t\t\t\tlet count: { [index: string]: number } = {};\n\n\t\t\t\tlet groupFieldValues: { [index: string]: string } = {};\n\t\t\t\tlet workingFields: { [index: string]: string } = {};\n\n\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\tsum[field] = 0;\n\t\t\t\t\tcount[field] = 0;\n\t\t\t\t\tgroupFieldValues[field] = series.get((field + \"Grouped\") as any);\n\t\t\t\t\tworkingFields[field] = field + \"Working\";\n\t\t\t\t})\n\n\t\t\t\tlet intervalDuration = $time.getDuration(interval.timeUnit);\n\n\t\t\t\tlet firstItem = dataItems[0];\n\t\t\t\tlet firstDate: Date;\n\t\t\t\tif (firstItem) {\n\t\t\t\t\tfirstDate = new Date(dataItems[0].get(key as any));\n\t\t\t\t}\n\n\t\t\t\tlet prevNewDataItem: DataItem<IXYSeriesDataItem> | undefined;\n\t\t\t\t$array.each(dataItems, (dataItem) => {\n\t\t\t\t\tlet time = dataItem.get(key as any);\n\t\t\t\t\tlet roundedTime = $time.round(new Date(time), interval.timeUnit, interval.count, firstDay, utc, firstDate, timezone).getTime();\n\t\t\t\t\tlet dataContext: any;\n\n\t\t\t\t\tif (previousTime < roundedTime - intervalDuration / 24) {\n\t\t\t\t\t\tdataContext = $object.copy(dataItem.dataContext);\n\n\t\t\t\t\t\tnewDataItem = new DataItem(series, dataContext, series._makeDataItem(dataContext));\n\t\t\t\t\t\tnewDataItem.setRaw(key as any, roundedTime);\n\n\t\t\t\t\t\tseries._dataSets[dataSetId].push(newDataItem);\n\n\t\t\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\t\t\tlet value = dataItem.get(field as any);\n\t\t\t\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(workingFields[field] as any, value);\n\t\t\t\t\t\t\t\tcount[field] = 1;\n\t\t\t\t\t\t\t\tsum[field] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tsum[field] = 0;\n\t\t\t\t\t\t\t\tcount[field] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (groupOriginals) {\n\t\t\t\t\t\t\tnewDataItem.set(\"originals\", [dataItem]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (groupCallback && prevNewDataItem) {\n\t\t\t\t\t\t\tgroupCallback(prevNewDataItem, interval);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprevNewDataItem = newDataItem;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\t\t\tlet groupKey = groupFieldValues[field];\n\t\t\t\t\t\t\tlet value = dataItem.get(field as any);\n\n\t\t\t\t\t\t\tif (value != null) {\n\n\t\t\t\t\t\t\t\tlet currentValue = newDataItem.get(field as any);\n\n\t\t\t\t\t\t\t\tswitch (groupKey) {\n\t\t\t\t\t\t\t\t\tcase \"close\":\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"sum\":\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, currentValue + value);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"open\":\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"low\":\n\t\t\t\t\t\t\t\t\t\tif (value < currentValue) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"high\":\n\t\t\t\t\t\t\t\t\t\tif (value > currentValue) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"average\":\n\t\t\t\t\t\t\t\t\t\tcount[field]++;\n\t\t\t\t\t\t\t\t\t\tsum[field] += value;\n\t\t\t\t\t\t\t\t\t\tlet average = sum[field] / count[field];\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, average);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"extreme\":\n\t\t\t\t\t\t\t\t\t\tif (Math.abs(value) > Math.abs(currentValue)) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(workingFields[field] as any, newDataItem.get(field as any));\n\t\t\t\t\t\t\t\tlet dataContext: any = $object.copy(dataItem.dataContext);\n\t\t\t\t\t\t\t\tdataContext[key as any] = roundedTime;\n\t\t\t\t\t\t\t\tnewDataItem.dataContext = dataContext;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (groupOriginals) {\n\t\t\t\t\t\t\tnewDataItem.get(\"originals\")!.push(dataItem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpreviousTime = roundedTime;\n\t\t\t\t})\n\n\t\t\t\tif (groupCallback && prevNewDataItem) {\n\t\t\t\t\tgroupCallback(prevNewDataItem, interval);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (series._dataSetId) {\n\t\t\t\tseries.setDataSet(series._dataSetId);\n\t\t\t}\n\t\t\tthis.markDirtySize();\n\t\t}\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._groupingCalculated = false;\n\t\tthis._dataGrouped = false;\n\t}\n\n\t/**\n\t * Returns a time interval axis would group data to for a specified duration.\n\t *\n\t * @since 5.2.1\n\t */\n\tpublic getGroupInterval(duration: number): ITimeInterval {\n\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\tlet groupInterval = $time.chooseInterval(0, duration, this.get(\"groupCount\", Infinity), this.get(\"groupIntervals\")!);\n\t\tif ($time.getIntervalDuration(groupInterval) < $time.getIntervalDuration(baseInterval)) {\n\t\t\tgroupInterval = { ...baseInterval };\n\t\t}\n\t\treturn groupInterval;\n\t}\n\n\t/**\n\t * Return `max` of a specified time interval.\n\t * \n\t * Will work only if the axis was grouped to this interval at least once.\n\t * \n\t * @since 5.2.1\n\t * @param   interval  Interval\n\t * @return            Max\n\t */\n\tpublic getIntervalMax(interval: ITimeInterval): number {\n\t\treturn this._intervalMax[interval.timeUnit + interval.count];\n\t}\n\n\t/**\n\t * Return `min` of a specified time interval.\n\t * \n\t * Will work only if the axis was grouped to this interval at least once.\n\t * \n\t * @since 5.2.1\n\t * @param   interval  Interval\n\t * @return            Min\n\t */\n\tpublic getIntervalMin(interval: ITimeInterval): number {\n\t\treturn this._intervalMin[interval.timeUnit + interval.count];\n\t}\n\n\tprotected _handleRangeChange() {\n\t\tsuper._handleRangeChange();\n\n\t\tlet selectionMin = Math.round(this.getPrivate(\"selectionMin\")! as number);\n\t\tlet selectionMax = Math.round(this.getPrivate(\"selectionMax\")! as number);\n\n\t\tif ($type.isNumber(selectionMin) && $type.isNumber(selectionMax)) {\n\n\t\t\tif (this.get(\"endLocation\") == 0) {\n\t\t\t\tselectionMax += 1;\n\t\t\t}\n\n\t\t\tif (this.get(\"groupData\") && !this._groupingCalculated) {\n\t\t\t\tthis._groupingCalculated = true;\n\n\t\t\t\tlet modifiedDifference = (selectionMax - selectionMin) + (this.get(\"startLocation\", 0) + (1 - this.get(\"endLocation\", 1)) * this.baseDuration());\n\t\t\t\tlet groupInterval = this.get(\"groupInterval\");\n\n\t\t\t\tif (!groupInterval) {\n\t\t\t\t\tgroupInterval = this.getGroupInterval(modifiedDifference);\n\t\t\t\t}\n\n\t\t\t\tlet current = this.getPrivate(\"groupInterval\");\n\n\t\t\t\tif (groupInterval && (!current || (current.timeUnit !== groupInterval.timeUnit || current.count !== groupInterval.count) || this._seriesDataGrouped)) {\n\t\t\t\t\tthis._seriesDataGrouped = false;\n\t\t\t\t\tthis.setPrivateRaw(\"groupInterval\", groupInterval);\n\t\t\t\t\tthis._setBaseInterval(groupInterval)\n\n\n\t\t\t\t\tlet newId = groupInterval.timeUnit + groupInterval.count;\n\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\t\t\tseries.setDataSet(newId);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tthis.markDirtyExtremes();\n\n\t\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\t\t\tconst type = \"groupintervalchanged\";\n\t\t\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\n\t\t\t\t\tconst start = $array.getFirstSortedIndex(series.dataItems, (dataItem) => {\n\t\t\t\t\t\treturn $order.compare(dataItem.get(fieldName), selectionMin);\n\t\t\t\t\t});\n\n\t\t\t\t\tlet startIndex = start.index;\n\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tstartIndex -= 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectionMax += this.baseDuration() * (1 - this.get(\"endLocation\", 1));\n\n\t\t\t\t\tconst end = $array.getSortedIndex(series.dataItems, (dataItem) => {\n\t\t\t\t\t\treturn $order.compare(dataItem.get(fieldName), selectionMax);\n\t\t\t\t\t});\n\n\t\t\t\t\tlet endIndex = end.index;\n\t\t\t\t\tlet endIndex2 = endIndex;\n\n\t\t\t\t\tif (endIndex2 > 1) {\n\t\t\t\t\t\tendIndex2--;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst firstDataItem = series.dataItems[startIndex];\n\t\t\t\t\tconst lastDataItem = series.dataItems[endIndex2];\n\n\t\t\t\t\tlet lastDate: number | undefined;\n\t\t\t\t\tlet firstDate: number | undefined;\n\t\t\t\t\tif (firstDataItem) {\n\t\t\t\t\t\tfirstDate = firstDataItem.get(fieldName);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastDataItem) {\n\t\t\t\t\t\tlastDate = lastDataItem.get(fieldName);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet outOfSelection = false;\n\t\t\t\t\tif (lastDate != null && firstDate != null) {\n\t\t\t\t\t\tif (lastDate < selectionMin || firstDate > selectionMax) {\n\t\t\t\t\t\t\toutOfSelection = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tseries.setPrivate(\"outOfSelection\", outOfSelection);\n\t\t\t\t\tseries.setPrivate(\"startIndex\", startIndex);\n\t\t\t\t\tseries.setPrivate(\"endIndex\", endIndex);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _adjustMinMax(min: number, max: number, gridCount: number, _strictMode?: boolean): IMinMaxStep {\n\t\treturn { min: min, max: max, step: (max - min) / gridCount };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic intervalDuration(): number {\n\t\treturn this._intervalDuration;\n\t}\n\n\tprotected _saveMinMax(min: number, max: number) {\n\t\tlet groupInterval = this.getPrivate(\"groupInterval\");\n\n\t\tif (!groupInterval) {\n\t\t\tgroupInterval = this.get(\"baseInterval\");\n\t\t}\n\n\t\tlet id = groupInterval.timeUnit + groupInterval.count;\n\t\tthis._intervalMin[id] = min;\n\t\tthis._intervalMax[id] = max;\n\t}\n\n\tprotected _getM(timeUnit: TimeUnit) {\n\t\tif (timeUnit == \"month\" || timeUnit == \"year\" || timeUnit == \"day\") {\n\t\t\treturn 1.05;\n\t\t}\n\t\treturn 1.01;\n\t}\n\n\tprotected _prepareAxisItems() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\t\t\tconst selectionMin = Math.round(this.getPrivate(\"selectionMin\")! as number);\n\t\t\tconst selectionMax = Math.round(this.getPrivate(\"selectionMax\")! as number);\n\t\t\tconst renderer = this.get(\"renderer\");\n\t\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\n\t\t\tlet value = selectionMin;\n\t\t\tlet i = 0;\n\n\t\t\tconst intervals = this.get(\"gridIntervals\")!;\n\t\t\tlet gridInterval = $time.chooseInterval(0, selectionMax - selectionMin, renderer.gridCount(), intervals);\n\n\t\t\tif ($time.getIntervalDuration(gridInterval) < this.baseDuration()) {\n\t\t\t\tgridInterval = { ...baseInterval };\n\t\t\t}\n\n\t\t\tconst intervalDuration = $time.getIntervalDuration(gridInterval);\n\t\t\tthis._intervalDuration = intervalDuration;\n\n\t\t\tconst nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\n\t\t\tconst firstDay = this._root.locale.firstDayOfWeek;\n\t\t\tconst utc = this._root.utc;\n\t\t\tconst timezone = this._root.timezone;\n\n\t\t\tvalue = $time.round(new Date(selectionMin - intervalDuration), gridInterval.timeUnit, gridInterval.count, firstDay, utc, new Date(min), timezone).getTime();\n\t\t\tlet previousValue = value - intervalDuration;\n\t\t\tlet format: string | Intl.DateTimeFormatOptions;\n\t\t\tconst formats = this.get(\"dateFormats\")!;\n\n\t\t\tthis.setPrivateRaw(\"gridInterval\", gridInterval);\n\n\t\t\twhile (value < selectionMax + intervalDuration) {\n\t\t\t\tlet dataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\tif (this.dataItems.length < i + 1) {\n\t\t\t\t\tdataItem = new DataItem(this, undefined, {});\n\t\t\t\t\tthis._dataItems.push(dataItem);\n\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdataItem = this.dataItems[i];\n\t\t\t\t}\n\n\t\t\t\tthis._createAssets(dataItem, []);\n\n\t\t\t\tthis._toggleDataItem(dataItem, true);\n\n\t\t\t\tdataItem.setRaw(\"value\", value);\n\n\t\t\t\tlet endValue = value + $time.getDuration(gridInterval.timeUnit, gridInterval.count * this._getM(gridInterval.timeUnit));\n\t\t\t\tendValue = $time.round(new Date(endValue), gridInterval.timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\n\t\t\t\tdataItem.setRaw(\"endValue\", endValue);\n\n\t\t\t\tlet date = new Date(value);\n\n\t\t\t\tformat = formats[gridInterval.timeUnit];\n\t\t\t\tif (nextGridUnit && this.get(\"markUnitChange\") && $type.isNumber(previousValue)) {\n\t\t\t\t\tif (gridInterval.timeUnit != \"year\") {\n\t\t\t\t\t\tif ($time.checkChange(value, previousValue, nextGridUnit, utc, timezone)) {\n\t\t\t\t\t\t\tformat = this.get(\"periodChangeDateFormats\")![gridInterval.timeUnit];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.set(\"text\", this._root.dateFormatter.format(date, format!));\n\t\t\t\t}\n\n\t\t\t\tthis._prepareDataItem(dataItem, gridInterval.count);\n\n\t\t\t\tpreviousValue = value;\n\t\t\t\tvalue = endValue;\n\n\t\t\t\tif (value == previousValue) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tfor (let j = i; j < this.dataItems.length; j++) {\n\t\t\t\tthis._toggleDataItem(this.dataItems[j], false);\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.inited) {\n\t\t\t\t\tseries._markDirtyAxes();\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis._updateGhost();\n\t}\n\n\tprotected _updateFinals(start: number, end: number) {\n\t\tthis.setPrivateRaw(\"selectionMinFinal\", this.positionToValue(start));\n\t\tthis.setPrivateRaw(\"selectionMaxFinal\", this.positionToValue(end));\n\t}\n\n\tprotected _getDelta() {\n\t\tthis._deltaMinMax = this.baseDuration() / 2;\n\t}\n\n\tprotected _fixMin(min: number) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\t\tconst firstDay = this._root.locale.firstDayOfWeek;\n\t\tconst timezone = this._root.timezone;\n\t\tconst utc = this._root.utc;\n\t\tconst timeUnit = baseInterval.timeUnit;\n\t\tlet startTime = $time.round(new Date(min), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n\t\tlet endTime = startTime + $time.getDuration(timeUnit, baseInterval.count * this._getM(timeUnit))\n\t\tendTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\treturn startTime + (endTime - startTime) * this.get(\"startLocation\", 0);\n\t}\n\n\tprotected _fixMax(max: number) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\t\tconst firstDay = this._root.locale.firstDayOfWeek;\n\t\tconst timezone = this._root.timezone;\n\t\tconst utc = this._root.utc;\n\t\tconst timeUnit = baseInterval.timeUnit;\n\t\tlet startTime = $time.round(new Date(max), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n\t\tlet endTime = startTime + $time.getDuration(timeUnit, baseInterval.count * this._getM(timeUnit))\n\t\tendTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\n\t\treturn startTime + (endTime - startTime) * this.get(\"endLocation\", 1);\n\t}\n\n\tprotected _updateDates(_date: number, _series: XYSeries) {\n\n\t}\n\n\t/**\n\t * Returns a duration of currently active `baseInterval` in milliseconds.\n\t * \n\t * @return Duration\n\t */\n\tpublic baseDuration(): number {\n\t\treturn this._baseDuration;\n\t\t//return $time.getIntervalDuration(this.getPrivate(\"baseInterval\"));\n\t}\n\n\t/**\n\t * Returns a duration of user-defined `baseInterval` in milliseconds.\n\t *\n\t * @return Duration\n\t */\n\tpublic baseMainDuration(): number {\n\t\treturn $time.getIntervalDuration(this.get(\"baseInterval\"));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processSeriesDataItem(dataItem: DataItem<IXYSeriesDataItem>, fields: Array<string>) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\n\t\tif (!dataItem.open) {\n\t\t\tdataItem.open = {};\n\t\t}\n\t\tif (!dataItem.close) {\n\t\t\tdataItem.close = {};\n\t\t}\n\n\t\t$array.each(fields, (field) => {\n\t\t\tlet value = dataItem.get(field as any);\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tlet startTime = dataItem.open![field];\n\t\t\t\tlet endTime = dataItem.close![field];\n\t\t\t\t// this is done to save cpu, as rounding is quite expensive, especially with timezone set. \n\t\t\t\t// if value is between prev start and end, it means it didn't change, all is fine.\n\t\t\t\tif (value >= startTime && value <= endTime) {\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst firstDay = this._root.locale.firstDayOfWeek;\n\t\t\t\t\tconst utc = this._root.utc;\n\t\t\t\t\tconst timezone = this._root.timezone\n\t\t\t\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t\t\t\tconst count = baseInterval.count;\n\t\t\t\t\tstartTime = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\tendTime = startTime + $time.getDuration(timeUnit, count * this._getM(timeUnit));\n\t\t\t\t\tendTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\n\t\t\t\t\tdataItem.open![field] = startTime;\n\t\t\t\t\tdataItem.close![field] = endTime;\n\t\t\t\t}\n\n\t\t\t\tthis._updateDates(startTime, dataItem.component as XYSeries);\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionX(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\n\t\tlet openValue;\n\t\tlet closeValue;\n\n\t\tif (dataItem.open && dataItem.close) {\n\t\t\topenValue = dataItem.open[field];\n\t\t\tcloseValue = dataItem.close[field];\n\t\t}\n\t\telse {\n\t\t\topenValue = dataItem.get(field as any)\n\t\t\tcloseValue = openValue;\n\t\t}\n\n\t\tlet value = openValue + (closeValue - openValue) * cellLocation;\n\n\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateX(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionY(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\tlet openValue;\n\t\tlet closeValue;\n\n\t\tif (dataItem.open && dataItem.close) {\n\t\t\topenValue = dataItem.open[field];\n\t\t\tcloseValue = dataItem.close[field];\n\t\t}\n\t\telse {\n\t\t\topenValue = dataItem.get(field as any)\n\t\t\tcloseValue = openValue;\n\t\t}\n\n\t\tlet value = openValue + (closeValue - openValue) * cellLocation;\n\n\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateY(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic roundAxisPosition(position: number, location: number): number {\n\t\tlet value = this.positionToValue(position);\n\t\tvalue = value - (location - 0.5) * this.baseDuration();\n\n\t\tlet baseInterval = this.getPrivate(\"baseInterval\");\n\t\tif (!$type.isNaN(value)) {\n\t\t\tconst firstDay = this._root.locale.firstDayOfWeek;\n\t\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t\tconst utc = this._root.utc;\n\t\t\tconst timezone = this._root.timezone;\n\t\t\tconst count = baseInterval.count;\n\n\t\t\tvalue = $time.round(new Date(value), timeUnit, count, firstDay, utc, new Date(this.getPrivate(\"min\", 0)), timezone).getTime();\n\n\t\t\tlet duration = $time.getDateIntervalDuration(baseInterval, new Date(value), firstDay, utc, timezone);\n\t\t\tif (timezone) {\n\t\t\t\tvalue = $time.round(new Date(value + this.baseDuration() * 0.05), timeUnit, count, firstDay, utc, new Date(this.getPrivate(\"min\", 0)), timezone).getTime();\n\t\t\t\tduration = $time.getDateIntervalDuration(baseInterval, new Date(value + duration * location), firstDay, utc, timezone);\n\t\t\t}\n\n\t\t\treturn this.valueToPosition(value + duration * location);\n\t\t}\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * NOTE: Unless `adjustPosition` (2nd parameter) is set to `false`, the method\n\t * will adjust position by `tooltipIntervalOffset`.\n\t *\n\t * @param  position        Position\n\t * @param  adjustPosition  Adjust position\n\t * @return                 Tooltip text\n\t */\n\tpublic getTooltipText(position: number, adjustPosition?: boolean): string | undefined {\n\t\t//@todo number formatter + tag\n\t\tif (this.getPrivate(\"min\") != null) {\n\t\t\tlet format = this.get(\"tooltipDateFormats\")![this.getPrivate(\"baseInterval\").timeUnit];\n\t\t\tlet value = this.positionToValue(position);\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tlet date = new Date(value);\n\n\t\t\t\tlet baseInterval = this.getPrivate(\"baseInterval\");\n\t\t\t\tlet duration = $time.getDateIntervalDuration(baseInterval, date, this._root.locale.firstDayOfWeek, this._root.utc, this._root.timezone);\n\n\t\t\t\tif (adjustPosition !== false) {\n\t\t\t\t\tdate = new Date(value + this.get(\"tooltipIntervalOffset\", -this.get(\"tooltipLocation\", 0.5)) * duration)\n\t\t\t\t}\n\n\t\t\t\treturn this._root.dateFormatter.format(date, this.get(\"tooltipDateFormat\", format));\n\t\t\t}\n\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic getSeriesItem(series: XYSeries, position: number, location?: number, snap?: boolean): DataItem<IXYSeriesDataItem> | undefined {\n\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\t\tlet value = this.positionToValue(position);\n\n\t\tif (location == null) {\n\t\t\tlocation = 0.5;\n\t\t}\n\n\t\tvalue = value - (location - 0.5) * this.baseDuration();\n\n\t\tconst result = $array.getSortedIndex(series.dataItems, (dataItem) => {\n\t\t\tlet diValue = 0;\n\t\t\tif (dataItem.open) {\n\t\t\t\tdiValue = dataItem.open[fieldName];\n\t\t\t}\n\n\t\t\treturn $order.compare(diValue, value);\n\t\t});\n\n\t\tif (snap || series.get(\"snapTooltip\")) {\n\t\t\tlet first = series.dataItems[result.index - 1];\n\t\t\tlet second = series.dataItems[result.index];\n\n\t\t\tif (first && second) {\n\t\t\t\tif (first.open && second.close) {\n\t\t\t\t\tlet open = first.open[fieldName];\n\t\t\t\t\tlet close = second.close[fieldName];\n\n\t\t\t\t\tif (Math.abs(value - open) > Math.abs(value - close)) {\n\t\t\t\t\t\treturn second;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (first) {\n\t\t\t\treturn first;\n\t\t\t}\n\n\t\t\tif (second) {\n\t\t\t\treturn second;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst dataItem = series.dataItems[result.index - 1];\n\n\t\t\tif (dataItem) {\n\t\t\t\tif (dataItem.open && dataItem.close) {\n\t\t\t\t\tlet open = dataItem.open[fieldName];\n\t\t\t\t\tlet close = dataItem.close[fieldName];\n\n\t\t\t\t\tif (value >= open && value <= close) {\n\t\t\t\t\t\treturn dataItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic shouldGap(dataItem: DataItem<IXYSeriesDataItem>, nextItem: DataItem<IXYSeriesDataItem>, autoGapCount: number, fieldName: string): boolean {\n\t\tconst value1 = dataItem.get(fieldName as any);\n\t\tconst value2 = nextItem.get(fieldName as any);\n\n\t\tif (value2 - value1 > this.baseDuration() * autoGapCount) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Zooms the axis to specific `start` and `end` dates.\n\t *\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\n\t *\n\t * @param  start     Start Date\n\t * @param  end       End Date\n\t * @param  duration  Duration in milliseconds\n\t */\n\tpublic zoomToDates(start: Date, end: Date, duration?: number) {\n\t\tthis.zoomToValues(start.getTime(), end.getTime(), duration);\n\t}\n\n\t/**\n\t * Returns a `Date` object corresponding to specific position within plot\n\t * area.\n\t *\n\t * @param   position  Pposition\n\t * @return            Date\n\t */\n\tpublic positionToDate(position: number): Date {\n\t\treturn new Date(this.positionToValue(position));\n\t}\n\n\t/**\n\t * Returns a relative position within plot area that corresponds to specific\n\t * date.\n\t *\n\t * @param   date  Date\n\t * @return        Position\n\t */\n\tpublic dateToPosition(date: Date): number {\n\t\treturn this.valueToPosition(date.getTime());\n\t}\n\n\t/**\n\t * Returns relative position between two grid lines of the axis.\n\t *\n\t * @since 5.2.30\n\t * @return Position\n\t */\n\tpublic getCellWidthPosition(): number {\n\t\tlet max = this.getPrivate(\"selectionMax\", this.getPrivate(\"max\"));\n\t\tlet min = this.getPrivate(\"selectionMin\", this.getPrivate(\"min\"));\n\n\t\tif ($type.isNumber(max) && $type.isNumber(min)) {\n\t\t\treturn this._intervalDuration / (max - min);\n\t\t}\n\t\treturn 0.05;\n\t}\n}\n","import { useRef, useState, useEffect } from 'react';\r\nimport * as am5 from '@amcharts/amcharts5';\r\nimport * as am5xy from '@amcharts/amcharts5/xy';\r\nimport am5themes_Animated from '@amcharts/amcharts5/themes/Animated';\r\nimport am5themes_Responsive from '@amcharts/amcharts5/themes/Responsive';\r\nimport { dateFormat, lastDateOfMonth, timeSeriesHandedOverChartData } from '../Query';\r\nimport { lotLayer } from '../layers';\r\nimport { view } from '../Scene';\r\nimport Query from '@arcgis/core/rest/support/Query';\r\nimport FeatureFilter from '@arcgis/core/layers/support/FeatureFilter';\r\nimport {\r\n  barangayField,\r\n  lotHandedOverDateField,\r\n  lotHandOverDateField,\r\n  lotTargetActualDateField,\r\n  lotTargetActualField,\r\n  municipalityField,\r\n} from '../StatusUniqueValues';\r\nimport { useDropdownContext } from './DropdownContext';\r\n\r\n// Dispose function\r\nfunction maybeDisposeRoot(divId: any) {\r\n  am5.array.each(am5.registry.rootElements, function (root) {\r\n    if (root.dom.id === divId) {\r\n      root.dispose();\r\n    }\r\n  });\r\n}\r\nconst LotProgressChart = () => {\r\n  const { municipalSelected, barangaySelected } = useDropdownContext();\r\n\r\n  const municipal = municipalSelected.municipality;\r\n  const barangay = barangaySelected.name;\r\n\r\n  const legendRef = useRef<unknown | any | undefined>({});\r\n  const xAxisRef = useRef<unknown | any | undefined>({});\r\n  const yAxisRef = useRef<unknown | any | undefined>({});\r\n  const chartRef = useRef<unknown | any | undefined>({});\r\n  const [lotProgressData, setLotProgressData] = useState([]);\r\n\r\n  const chartID = 'lot-progress';\r\n  useEffect(() => {\r\n    // generateLotProgress(municipal, barangay).then((result: any) => {\r\n    //   setLotProgressData(result);\r\n    // });\r\n    timeSeriesHandedOverChartData(municipal, barangay).then((result: any) => {\r\n      setLotProgressData(result);\r\n    });\r\n  }, [municipal, barangay]);\r\n\r\n  useEffect(() => {\r\n    maybeDisposeRoot(chartID);\r\n    var root = am5.Root.new(chartID);\r\n    root.container.children.clear();\r\n    root._logo?.dispose();\r\n\r\n    // Set themesf\r\n    // https://www.amcharts.com/docs/v5/concepts/themes/\r\n    root.setThemes([am5themes_Animated.new(root), am5themes_Responsive.new(root)]);\r\n\r\n    // Create chart\r\n    // https://www.amcharts.com/docs/v5/charts/xy-chart/\r\n    var chart = root.container.children.push(\r\n      am5xy.XYChart.new(root, {\r\n        panX: false,\r\n        panY: false,\r\n        wheelX: 'panX',\r\n        wheelY: 'zoomX',\r\n        paddingBottom: 35,\r\n        layout: root.verticalLayout,\r\n      }),\r\n    );\r\n    chartRef.current = chart;\r\n\r\n    // Chart title\r\n    chart.children.unshift(\r\n      am5.Label.new(root, {\r\n        text: 'Monthly Progress & Target Schedule of Handed Over Lots',\r\n        fontSize: 14,\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n        fill: am5.color('#ffffff'),\r\n        x: am5.percent(50),\r\n        centerX: am5.percent(50),\r\n        paddingTop: 0,\r\n        marginBottom: 10,\r\n      }),\r\n    );\r\n\r\n    // Add cursor\r\n    // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/\r\n    var cursor = chart.set(\r\n      'cursor',\r\n      am5xy.XYCursor.new(root, {\r\n        behavior: 'zoomX',\r\n      }),\r\n    );\r\n    cursor.lineY.set('visible', false);\r\n\r\n    // Create axes\r\n    // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/\r\n    var xRenderer = am5xy.AxisRendererX.new(root, {\r\n      //minGridDistance: 60,\r\n      strokeOpacity: 1,\r\n      strokeWidth: 1,\r\n      stroke: am5.color('#ffffff'),\r\n    });\r\n    var xAxis = chart.xAxes.push(\r\n      am5xy.DateAxis.new(root, {\r\n        // When you group data for series\r\n        // Note you need to baseInterval timeUnit is 'day'\r\n        // and groupIntervals timeUnit is 'month'\r\n        maxDeviation: 0,\r\n        groupData: true,\r\n        baseInterval: {\r\n          timeUnit: 'day',\r\n          count: 1,\r\n        },\r\n        // count:\r\n        groupIntervals: [{ timeUnit: 'month', count: 1 }],\r\n        // categoryField: 'date',\r\n        renderer: xRenderer,\r\n        tooltip: am5.Tooltip.new(root, {}),\r\n      }),\r\n    );\r\n\r\n    var yAxis = chart.yAxes.push(\r\n      am5xy.ValueAxis.new(root, {\r\n        // calculateTotals: true,\r\n        min: 0,\r\n        // max: 100,\r\n        // numberFormat: \"#'%'\",\r\n        strictMinMax: true,\r\n        renderer: am5xy.AxisRendererY.new(root, {\r\n          minGridDistance: 60,\r\n          strokeOpacity: 1,\r\n          strokeWidth: 1,\r\n          stroke: am5.color('#ffffff'),\r\n        }),\r\n      }),\r\n    );\r\n\r\n    xAxis.get('renderer').labels.template.setAll({\r\n      //oversizedBehavior: \"wrap\",\r\n      textAlign: 'center',\r\n      fill: am5.color('#ffffff'),\r\n      //maxWidth: 150,\r\n      fontSize: 12,\r\n    });\r\n\r\n    yAxis.get('renderer').labels.template.setAll({\r\n      //oversizedBehavior: \"wrap\",//\r\n      textAlign: 'center',\r\n      fill: am5.color('#ffffff'),\r\n      //maxWidth: 150,\r\n      fontSize: 12,\r\n    });\r\n    xAxisRef.current = xAxis;\r\n    yAxisRef.current = yAxis;\r\n\r\n    // Add yaxix title\r\n    yAxis.children.unshift(\r\n      am5.Label.new(root, {\r\n        rotation: -90,\r\n        // text: 'No. of casted components',\r\n        y: am5.p50,\r\n        centerX: am5.p50,\r\n        fill: am5.color('#ffffff'),\r\n        fontSize: 11,\r\n      }),\r\n    );\r\n\r\n    // Add legend\r\n    // https://www.amcharts.com/docs/v5/charts/xy-chart/legend-xy-series/\r\n    var legend = chart.children.push(\r\n      am5.Legend.new(root, {\r\n        centerX: am5.p50,\r\n        centerY: am5.percent(50),\r\n        x: am5.p50,\r\n        y: am5.percent(108),\r\n        marginTop: -20,\r\n      }),\r\n    );\r\n    legendRef.current = legend;\r\n\r\n    legend.labels.template.setAll({\r\n      oversizedBehavior: 'truncate',\r\n      fill: am5.color('#ffffff'),\r\n      fontSize: 17,\r\n      scale: 0.7,\r\n      //textDecoration: \"underline\"\r\n      //width: am5.percent(200)\r\n      //fontWeight: \"300\"\r\n    });\r\n\r\n    // check this;\r\n    // newDataItem = new DataItem(series, dataContext, series._makeDataItem(dataContext));\r\n    // dataItem is of dataItems\r\n    // dataContext: dataItem.dataContext\r\n\r\n    // Add series\r\n    // https://www.amcharts.com/docs/v5/charts/xy-chart/series/\r\n    function makeSeries(name: any, fieldName: any, color: any) {\r\n      var series = chart.series.push(\r\n        am5xy.ColumnSeries.new(root, {\r\n          name: name,\r\n          stacked: true,\r\n          xAxis: xAxis,\r\n          yAxis: yAxis,\r\n          valueYField: fieldName,\r\n          valueXField: 'date',\r\n          // valueYShow: 'valueYTotalPercent',\r\n          categoryXField: 'date',\r\n          fill: color,\r\n          stroke: color,\r\n          // valueYGrouped: 'sum',\r\n        }),\r\n      );\r\n\r\n      // select chart series and filter\r\n      var highlightSelect: any;\r\n      series.columns.template.events.on('click', (ev) => {\r\n        // const qExpression =\r\n        const select: any = ev.target.dataItem?.dataContext;\r\n        const raw_date = new Date(select?.date);\r\n        const last_date = lastDateOfMonth(new Date(raw_date));\r\n        const qDate =\r\n          fieldName === 'target'\r\n            ? `${lotHandOverDateField} <= date'` + last_date + \"'\"\r\n            : `${lotHandedOverDateField} <= date'` + last_date + \"'\";\r\n\r\n        const qMunicipality = \"Municipality = '\" + municipal + \"'\";\r\n        const qBarangay = \"Barangay = '\" + barangay + \"'\";\r\n        const qMunicipalBarangay = qMunicipality + ' AND ' + qBarangay;\r\n        const status = fieldName === 'target' ? 1 : 2;\r\n        const qSelected = `${lotTargetActualField} = ` + status;\r\n\r\n        let layerViewFilter: any;\r\n\r\n        var query = lotLayer.createQuery();\r\n        if (municipal && barangay) {\r\n          query.where = qMunicipalBarangay + ' AND ' + qSelected + ' AND ' + qDate;\r\n          layerViewFilter = qMunicipalBarangay + ' AND ' + qSelected + ' AND ' + qDate;\r\n        } else if (municipal && !barangay) {\r\n          query.where = qMunicipality + ' AND ' + qSelected + ' AND ' + qDate;\r\n          layerViewFilter = qMunicipality + ' AND ' + qSelected + ' AND ' + qDate;\r\n        } else {\r\n          query.where = qSelected + ' AND ' + qDate;\r\n          layerViewFilter = qSelected + ' AND ' + qDate;\r\n        }\r\n\r\n        view.whenLayerView(lotLayer).then((layerView: any) => {\r\n          lotLayer.queryFeatures(query).then((results: any) => {\r\n            const RESULT_LENGTH = results.features;\r\n            const ROW_N = RESULT_LENGTH.length;\r\n\r\n            let objID = [];\r\n            for (var i = 0; i < ROW_N; i++) {\r\n              var obj = results.features[i].attributes.OBJECTID;\r\n              objID.push(obj);\r\n            }\r\n\r\n            var queryExt = new Query({\r\n              objectIds: objID,\r\n            });\r\n\r\n            lotLayer.queryExtent(queryExt).then(function (result) {\r\n              if (result.extent) {\r\n                view.goTo(result.extent);\r\n              }\r\n            });\r\n\r\n            if (highlightSelect) {\r\n              highlightSelect.remove();\r\n            }\r\n            highlightSelect = layerView.highlight(objID);\r\n\r\n            view.on('click', function () {\r\n              layerView.filter = new FeatureFilter({\r\n                where: undefined,\r\n              });\r\n              highlightSelect.remove();\r\n            });\r\n          });\r\n          layerView.filter = new FeatureFilter({\r\n            where: layerViewFilter,\r\n          });\r\n        }); // End of whenLayerView\r\n      });\r\n\r\n      series.columns.template.setAll({\r\n        tooltipText: '{name}: {valueY} ({valueYTotalPercent.formatNumber(\"#.#\")}%)',\r\n        tooltipY: am5.percent(10),\r\n      });\r\n      series.data.setAll(lotProgressData);\r\n\r\n      // Make stuff animate on load\r\n      // https://www.amcharts.com/docs/v5/concepts/animations/\r\n      series.appear();\r\n\r\n      series.bullets.push(function () {\r\n        return am5.Bullet.new(root, {\r\n          sprite: am5.Label.new(root, {\r\n            text: '{valueY}',\r\n            fill: root.interfaceColors.get('alternativeText'),\r\n            centerY: am5.p50,\r\n            centerX: am5.p50,\r\n            populateText: true,\r\n          }),\r\n        });\r\n      });\r\n\r\n      legend.data.push(series);\r\n    }\r\n\r\n    makeSeries('Actual', 'actual', am5.color('#0096FF'));\r\n    makeSeries('Target', 'target', am5.color('#FF5733'));\r\n\r\n    chart.appear(1000, 100);\r\n\r\n    return () => {\r\n      root.dispose();\r\n    };\r\n  }, [chartID, lotProgressData]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        id={chartID}\r\n        style={{\r\n          height: '40vh',\r\n          width: '70%',\r\n          backgroundColor: '#2b2b2b',\r\n          color: 'white',\r\n          position: 'fixed',\r\n          zIndex: 10,\r\n          bottom: 0,\r\n          marginLeft: 'auto',\r\n          marginRight: 'auto',\r\n        }}\r\n      ></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LotProgressChart;\r\n"],"names":["DateAxis","ValueAxis","constructor","Object","defineProperty","_afterNew","this","_settings","themeTags","$utils","super","_setBaseInterval","get","on","interval","setPrivateRaw","_baseDuration","$time","_fixZoomFactor","maxZoomFactor","Infinity","Math","round","getPrivate","baseMainDuration","_groupData","min","max","$type","groupInterval","isDirty","setRaw","_handleRangeChange","_dataGrouped","$array","series","_groupSeriesData","baseInterval","mainDataSetId","timeUnit","count","setDataSet","resetGrouping","undefined","markDirtyExtremes","_seriesDataGrouped","intervals","baseDuration","groupIntervals","push","_dataSets","key","fields","baseAxis","_valueYFields","_valueXFields","dataItems","_mainDataItems","groupCallback","groupOriginals","firstDay","_root","locale","firstDayOfWeek","utc","timezone","newDataItem","previousTime","dataSetId","sum","groupFieldValues","workingFields","field","firstDate","prevNewDataItem","intervalDuration","Date","dataItem","dataContext","time","roundedTime","getTime","$object","DataItem","_makeDataItem","value","set","groupKey","currentValue","average","abs","_dataSetId","markDirtySize","_clearDirty","_groupingCalculated","getGroupInterval","duration","assign","getIntervalMax","_intervalMax","getIntervalMin","_intervalMin","selectionMin","selectionMax","modifiedDifference","current","newId","events","once","type","isEnabled","dispatch","target","fieldName","startIndex","$order","index","endIndex","endIndex2","firstDataItem","lastDataItem","lastDate","outOfSelection","setPrivate","_adjustMinMax","gridCount","_strictMode","step","_intervalDuration","_saveMinMax","id","_getM","_prepareAxisItems","renderer","i","gridInterval","nextGridUnit","format","previousValue","formats","length","_dataItems","processDataItem","_createAssets","_toggleDataItem","endValue","date","label","dateFormatter","_prepareDataItem","j","inited","_markDirtyAxes","_updateGhost","_updateFinals","start","end","positionToValue","_getDelta","_deltaMinMax","_fixMin","startTime","endTime","_fixMax","_updateDates","_date","_series","processSeriesDataItem","open","close","component","getDataItemPositionX","cellLocation","axisLocation","openValue","closeValue","_baseValue","valueToPosition","getDataItemCoordinateX","positionToCoordinate","getDataItemPositionY","getDataItemCoordinateY","roundAxisPosition","position","location","NaN","getTooltipText","adjustPosition","getSeriesItem","snap","result","diValue","first","second","shouldGap","nextItem","autoGapCount","value1","zoomToDates","zoomToValues","positionToDate","dateToPosition","getCellWidthPosition","classNames","concat","className","LotProgressChart","municipalSelected","barangaySelected","useDropdownContext","municipal","municipality","barangay","name","legendRef","useRef","xAxisRef","yAxisRef","chartRef","lotProgressData","setLotProgressData","useState","chartID","useEffect","timeSeriesHandedOverChartData","then","_root$_logo","divId","am5","rootElements","root","dom","dispose","new","container","children","clear","_logo","setThemes","am5themes_Animated","am5themes_Responsive","chart","am5xy","panX","panY","wheelX","wheelY","paddingBottom","layout","verticalLayout","unshift","text","fontSize","fontWeight","textAlign","fill","x","centerX","paddingTop","marginBottom","behavior","lineY","xRenderer","strokeOpacity","strokeWidth","stroke","xAxis","xAxes","maxDeviation","groupData","tooltip","yAxis","yAxes","strictMinMax","minGridDistance","labels","template","setAll","rotation","y","legend","centerY","marginTop","makeSeries","color","highlightSelect","stacked","valueYField","valueXField","categoryXField","columns","ev","_ev$target$dataItem","select","raw_date","last_date","lastDateOfMonth","qDate","lotHandOverDateField","lotHandedOverDateField","qMunicipality","qMunicipalBarangay","status","qSelected","lotTargetActualField","layerViewFilter","query","lotLayer","createQuery","where","view","whenLayerView","layerView","queryFeatures","results","ROW_N","features","objID","obj","attributes","OBJECTID","queryExt","Query","objectIds","queryExtent","extent","goTo","remove","highlight","filter","FeatureFilter","tooltipText","tooltipY","data","appear","bullets","sprite","interfaceColors","populateText","oversizedBehavior","scale","_jsx","_Fragment","style","height","width","backgroundColor","zIndex","bottom","marginLeft","marginRight"],"sourceRoot":""}